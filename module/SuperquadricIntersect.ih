// Copyright 2009-2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "rkcommon/math/vec.ih"
#include "math/AffineSpace.ih"

const uniform float EMPHASIS = 6.0;
const uniform float EPSILON_LINEAR = 0.001;
const uniform float EPSILON_NEWTON = 0.0001;
const uniform float SHARPNESS_LIMIT = 0.15; // this keeps gradients from nan
const int STEPS = 10;

uniform double getLinearCertainty(uniform vec3f eigvals)
{
  uniform double eigvalsSumInv = 1.0/(eigvals.x + eigvals.y + eigvals.z);
  uniform double cl = (eigvals.x - eigvals.y) * eigvalsSumInv;
  return cl;
}

uniform double getPlanarCertainty(uniform vec3f eigvals)
{
  uniform double eigvalsSumInv = 1.0/(eigvals.x + eigvals.y + eigvals.z);
  uniform double cp = 2.0 * (eigvals.y - eigvals.z) * eigvalsSumInv;
  return cp;
}

uniform vec2f getAB(uniform double cl, uniform double cp)
{
  uniform bool linear = cl >= cp;
  uniform float pPower = pow((1.0 - cp), EMPHASIS);
  pPower = clamp(pPower, 0.15, 1.0);
  uniform float lPower = pow((1.0 - cl), EMPHASIS);
  lPower = clamp(lPower, 0.15, 1.0);
  const uniform float A = linear ? pPower : lPower;
  const uniform float B = linear ? lPower : pPower;
  return make_vec2f(A, B);
}

// Superquadric implicit gradient
vec3f insideOutside_diff(vec3f p, uniform float alpha, uniform float beta, const uniform bool linear)
{
    vec3f dq;
    float x_sqr = p.x*p.x;
    float y_sqr = p.y*p.y;
    float z_sqr = p.z*p.z;
    uniform float alpha_inv = 1.0/alpha;
    uniform float beta_inv = 1.0/beta;
    const uniform float alpha_div_beta = alpha*beta_inv;
    if (linear) {
      float diff = pow(pow(y_sqr,alpha_inv)+pow(z_sqr,alpha_inv),alpha_div_beta-1.0);
      dq.x = pow(x_sqr,beta_inv)/p.x;
      dq.y = pow(y_sqr,alpha_inv)*diff/p.y;
      dq.z = pow(z_sqr,alpha_inv)*diff/p.z;
    }
    else {
      float diff = pow(pow(x_sqr,alpha_inv)+pow(y_sqr,alpha_inv),alpha_div_beta-1.0);
      dq.x = pow(x_sqr,alpha_inv)*diff/p.x;
      dq.y = pow(y_sqr,alpha_inv)*diff/p.y;
      dq.z = pow(z_sqr,beta_inv)/p.z;
    }
    dq = 2*dq*beta_inv;
    return dq;
}

float insideOutside(vec3f p, const uniform float alpha, const uniform float beta, const uniform bool linear)
{
  float x,y,z;
  if (linear) { x=p.y; y=p.z; z=p.x; } // around x axis
  else        { x=p.x; y=p.y; z=p.z; } // around z axis
  const uniform float alpha_inv = 1.0/alpha;
  const uniform float beta_inv = 1.0/beta;
  const uniform float alpha_div_beta = alpha*beta_inv;
  return pow(pow(x*x,alpha_inv) + pow(y*y,alpha_inv), alpha_div_beta) + pow(z*z,beta_inv) - 1.0;
}

inline Intersections intersectSuperquadricImpl(const vec3f &rayOrg,
    const vec3f &rayDir,
    const uniform vec3f &center,
    const uniform vec3f &eigvals,
    const uniform vec3f &eigvec1,
    const uniform vec3f &eigvec2)
{
  // Default is miss
  Intersections isect;
  isect.entry.hit = isect.exit.hit = false;
  isect.entry.t = inf;
  isect.exit.t = -inf;

  // get alpha & beta values for determining shape from superquadric shape
  uniform double cl = getLinearCertainty(eigvals);
  uniform double cp = getPlanarCertainty(eigvals);
  uniform bool linear = cl >= cp;
  uniform vec2f AB = getAB(cl, cp);

  // since we constrain superquadric space to shapes for superquadric tensor glyphs,
  // we can the intersections of box, sphere, & cylinder
  const uniform box3f box = make_box3f(make_vec3f(-1,-1,-1), make_vec3f(1,1,1));
  Intersections isectBox = intersectBox(rayOrg, rayDir, box);
  Intersections isectSph = intersectSphere(rayOrg, rayDir, make_vec3f(0.f,0.f,0.f), 1.0);
  float invRayLen = 1.0 / length(rayDir);
  Intersections isectCyl;
  if (linear)
    isectCyl = intersectCylinder(rayOrg, rayDir/length(rayDir), make_vec3f(-1,0,0), make_vec3f(1,0,0),1);
  else
    isectCyl = intersectCylinder(rayOrg, rayDir/length(rayDir), make_vec3f(0,0,-1), make_vec3f(0,0,1),1);

  bool entryHit = isectBox.entry.hit;
  if (!entryHit && !isectBox.exit.hit) return isect;

  isectCyl.entry.t *= invRayLen;
  isectCyl.exit.t *= invRayLen;

  Hit boxHit, cylHit, sphHit;
  if (isectBox.entry.t > 0) {
    boxHit = isectBox.entry;
    cylHit = isectCyl.entry;
    sphHit = isectSph.entry;
  } else {
    boxHit = isectBox.exit;
    cylHit = isectCyl.exit;
    sphHit = isectSph.exit;
  }

  float spherical = pow(AB.y,2.0*AB.x/AB.y);
  float cylindrical = pow(AB.x,1.0/AB.y);

  float t;
  if (cylHit.hit && sphHit.hit)
    t = (1.0-cylindrical-spherical)*boxHit.t + cylindrical*cylHit.t + spherical*sphHit.t;
  else if (cylHit.hit)
    t = (1.0-cylindrical)*boxHit.t + cylindrical*cylHit.t;
  else if (sphHit.hit)
    t = (1.0-spherical)*boxHit.t + spherical*sphHit.t;
  else
    t = boxHit.t;

  #if 1 // Newton Method
  for (int step = 0; step < STEPS; ++step)
  {
    vec3f p = rayOrg + t*rayDir;
    float io = insideOutside(p, AB.x, AB.y, linear);
    vec3f gradient = insideOutside_diff(p, AB.x, AB.y, linear);
    float sqd = dot(gradient, rayDir);

    if (abs(io) < EPSILON_NEWTON)
    {
      isect.entry.hit = true;
      isect.entry.t = t;
      isect.entry.N = normalize(gradient);
      isect.entry.u = (float)step / (float)STEPS;
      break;
    }
    float stepsize = io / sqd;
    t -= stepsize;
  }
  #else // Linear Method
  vec3f p = rayOrg + t*rayDir;
  vec3f inc = 0.1 * normalize(rayDir);
  bool movePos = true;
  for (int step = 0; step <= STEPS; ++step)
  {
    float io;
    if (linear)
      io = insideOutsideXAxis(p, AB.x, AB.y);
    else
      io = insideOutside(p, AB.x, AB.y);
    if (abs(io) < EPSILON_LINEAR)
    {
      isect.entry.hit = true;
      isect.entry.t = length(p);
      if (linear)
        isect.entry.N = insideOutsideXAxis_diff(p, AB.x, AB.y);
      else
        isect.entry.N = insideOutside_diff(p, AB.x, AB.y);
      isect.entry.N = normalize(isect.entry.N);
      isect.entry.u = (float)step / (float)STEPS;
      break;
    }
    p = p + inc;
    if ((movePos && io < 0) ||(!movePos && io > 0)) {
      inc = -0.5 * inc;
      movePos = !movePos;
    }
  }
  #endif

  return isect;
}

inline Intersections intersectSuperquadric(const vec3f &rayOrg,
    const vec3f &rayDir,
    const uniform vec3f &center,
    const uniform vec3f &eigvals,
    const uniform vec3f &eigvec1,
    const uniform vec3f &eigvec2)
{
  const uniform vec3f eigvec3 = cross(eigvec1, eigvec2);
  const uniform vec3f scaled_eigvec1 = eigvals.x * eigvec1;
  const uniform vec3f scaled_eigvec2 = eigvals.y * eigvec2;
  const uniform vec3f scaled_eigvec3 = eigvals.z * eigvec3;
  uniform affine3f trans = make_AffineSpace3f(scaled_eigvec1, scaled_eigvec2, scaled_eigvec3, center);
  uniform affine3f inv = rcp(trans);
  uniform linear3f rot = make_LinearSpace3f(eigvec1, eigvec2, eigvec3);
  uniform linear3f inv_scale = make_LinearSpace3f(make_vec3f(1.0/eigvals.x,0,0), make_vec3f(0,1.0/eigvals.y,0), make_vec3f(0,0,1.0/eigvals.z));

  vec3f cRayOrg = xfmPoint(inv, rayOrg);
  vec3f cRayDir = xfmVector(inv, rayDir);

  Intersections isect = intersectSuperquadricImpl(cRayOrg, cRayDir, center, eigvals, eigvec1, eigvec2);
  isect.entry.N = rot * inv_scale * isect.entry.N;
  return isect;
}
